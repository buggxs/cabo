name: Release to Play Store

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get version from release
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Parse release notes and create language-specific files
        id: release_notes
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });

            const releaseNotes = release.data.body;
            const fs = require('fs');

            // Erstelle whatsnew Verzeichnis
            if (!fs.existsSync('whatsnew')) {
              fs.mkdirSync('whatsnew');
            }

            // Parse Release Notes nach Sprachen
            const languages = {
              'en-US': '🇺🇸 English',
              'de-DE': '🇩🇪 Deutsch',
              // Weitere Sprachen hier hinzufügen
            };

            for (const [langCode, langMarker] of Object.entries(languages)) {
              // Suche den Abschnitt für die aktuelle Sprache
              const langPattern = new RegExp(`## ${langMarker}\\s*([^#]*)`);
              const match = releaseNotes.match(langPattern);

              if (match) {
                let notes = match[1].trim();

                // Entferne Markdown-Listen-Marker wenn vorhanden
                notes = notes.replace(/^\s*[-*]\s*/gm, '');

                // Begrenze auf 500 Zeichen (Play Store Limit)
                if (notes.length > 500) {
                  notes = notes.substring(0, 497) + '...';
                }

                // Schreibe in sprachspezifische Datei
                fs.writeFileSync(`whatsnew/whatsnew-${langCode}`, notes);
                console.log(`Created whatsnew file for ${langCode}`);
              } else {
                console.log(`No release notes found for ${langCode}`);
              }
            }

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: "16"
          distribution: "corretto"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"
          channel: "stable"

      - name: Get dependencies
        run: flutter pub get

        # Setup keystore for signing
      - name: Setup Keystore
        run: |
          # Erstelle einen sicheren Ordner außerhalb des Projektverzeichnisses
          mkdir -p $HOME/keystores

          # Dekodiere die base64-kodierten Secrets in Dateien
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > $HOME/keystores/upload-keystore.jks

          # Prüfe, ob die Datei korrekt erstellt wurde
          file $HOME/keystores/upload-keystore.jks

          # Erstelle key.properties Datei
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=$HOME/keystores/upload-keystore.jks" >> android/key.properties

          # Überprüfe, ob die Dateien erstellt wurden
          ls -la $HOME/keystores/
          cat android/key.properties

      - name: Ensure Gradle wrapper has execution permission
        run: chmod +x ./android/gradle/wrapper/gradlew

      - name: Verify keystore
        run: |
          # Prüfe, ob der Keystore ein gültiges JKS-Format hat
          if [ -f "$HOME/keystores/upload-keystore.jks" ]; then
            echo "Keystore file exists"
            # Versuche den Keystore zu lesen (ohne Passwort zu zeigen)
            if keytool -list -keystore $HOME/keystores/upload-keystore.jks -storepass ${{ secrets.STORE_PASSWORD }} 2>/dev/null; then
              echo "✅ Keystore is valid and can be read with the provided password"
            else
              echo "❌ Failed to read keystore with provided password"
              # Zeige Dateiformat an
              file $HOME/keystores/upload-keystore.jks
            fi
          else
            echo "❌ Keystore file does not exist"
          fi

          # Zeige gradle.properties
          echo "Checking gradle.properties:"
          if [ -f "android/gradle.properties" ]; then
            cat android/gradle.properties
          else
            echo "gradle.properties not found"
          fi

          # Überprüfe, ob der Android-Build-Prozess das Keystore-File finden kann
          echo "Checking android app build.gradle keystore configuration:"
          grep -A 10 "signingConfigs" android/app/build.gradle || echo "No signingConfigs found in build.gradle"

      - name: Build Android App Bundle
        run: flutter build appbundle --release

      - name: Decode service account key
        run: echo "${{ secrets.PLAY_STORE_CONFIG_JSON }}" | base64 --decode > play-store-config.json

      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: play-store-config.json
          packageName: com.buggxs.cabo
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: production
          status: completed
          whatsNewDirectory: whatsnew
          mappingFile: build/app/outputs/mapping/release/mapping.txt
